// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type {
	GetConfigApiV1ConfigGetResponse,
	UpdateConfigApiV1ConfigPutData,
	UpdateConfigApiV1ConfigPutResponse,
	GetActiveSourcesApiV1ConnectorSourcesGetResponse,
	GetPropertiesApiV1ConnectorPropertiesGetResponse,
	UpdateSourceXpathsApiV1ConnectorSourcesSourceIdPostData,
	UpdateSourceXpathsApiV1ConnectorSourcesSourceIdPostResponse,
	PingApiV1PingGetResponse,
	GetSourcesApiV1SourcesGetResponse,
	CreateSourceApiV1SourcesPostData,
	CreateSourceApiV1SourcesPostResponse,
	GetSourceApiV1SourcesSourceIdGetData,
	GetSourceApiV1SourcesSourceIdGetResponse,
	DeleteSourceApiV1SourcesSourceIdDeleteData,
	DeleteSourceApiV1SourcesSourceIdDeleteResponse,
	ReloadSourcesApiV1SourcesReloadPostResponse,
	ReprocessProductsApiV1SourcesReprocessPostData,
	ReprocessProductsApiV1SourcesReprocessPostResponse,
	UploadExcelFileApiV1SourcesExcelPostData,
	UploadExcelFileApiV1SourcesExcelPostResponse
} from './types.gen';

export class ConfigAPI {
	/**
	 * Get Config
	 * Get the current configuration.
	 * @returns ConfigModel Successful Response
	 * @throws ApiError
	 */
	public static get(): CancelablePromise<GetConfigApiV1ConfigGetResponse> {
		return __request(OpenAPI, {
			method: 'GET',
			url: '/api/v1/config/'
		});
	}

	/**
	 * Update Config
	 * Update the configuration.
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns ConfigModel Successful Response
	 * @throws ApiError
	 */
	public static update(
		data: UpdateConfigApiV1ConfigPutData
	): CancelablePromise<UpdateConfigApiV1ConfigPutResponse> {
		return __request(OpenAPI, {
			method: 'PUT',
			url: '/api/v1/config/',
			body: data.requestBody,
			mediaType: 'application/json',
			errors: {
				422: 'Validation Error'
			}
		});
	}
}

export class ConnectorAPI {
	/**
	 * Get Active Sources
	 * Get the list of websites for which the connector should be activated.
	 * @returns ConnectorSourcesResponse Successful Response
	 * @throws ApiError
	 */
	public static getActiveSources(): CancelablePromise<GetActiveSourcesApiV1ConnectorSourcesGetResponse> {
		return __request(OpenAPI, {
			method: 'GET',
			url: '/api/v1/connector/sources'
		});
	}

	/**
	 * Get Properties
	 * Get the list of available properties of the product.
	 * @returns PropertiesResponse Successful Response
	 * @throws ApiError
	 */
	public static getProperties(): CancelablePromise<GetPropertiesApiV1ConnectorPropertiesGetResponse> {
		return __request(OpenAPI, {
			method: 'GET',
			url: '/api/v1/connector/properties'
		});
	}

	/**
	 * Update Source Xpaths
	 * Update the cross-references for the source.
	 * @param data The data for the request.
	 * @param data.sourceId
	 * @param data.requestBody
	 * @returns SourceUpdateResponse Successful Response
	 * @throws ApiError
	 */
	public static updateSourceXpaths(
		data: UpdateSourceXpathsApiV1ConnectorSourcesSourceIdPostData
	): CancelablePromise<UpdateSourceXpathsApiV1ConnectorSourcesSourceIdPostResponse> {
		return __request(OpenAPI, {
			method: 'POST',
			url: '/api/v1/connector/sources/{source_id}',
			path: {
				source_id: data.sourceId
			},
			body: data.requestBody,
			mediaType: 'application/json',
			errors: {
				422: 'Validation Error'
			}
		});
	}
}

export class PingAPI {
	/**
	 * Ping
	 * Ping the API to check if it is running.
	 * @returns PingResponse Successful Response
	 * @throws ApiError
	 */
	public static ping(): CancelablePromise<PingApiV1PingGetResponse> {
		return __request(OpenAPI, {
			method: 'GET',
			url: '/api/v1/ping/'
		});
	}
}

export class SourcesAPI {
	/**
	 * Get Sources
	 * Get the sources
	 * @returns SourcesResponse Successful Response
	 * @throws ApiError
	 */
	public static get(): CancelablePromise<GetSourcesApiV1SourcesGetResponse> {
		return __request(OpenAPI, {
			method: 'GET',
			url: '/api/v1/sources/'
		});
	}

	/**
	 * Create Source
	 * Create the source
	 * @param data The data for the request.
	 * @param data.url
	 * @returns SourceCreateResponse Successful Response
	 * @throws ApiError
	 */
	public static createSource(
		data: CreateSourceApiV1SourcesPostData
	): CancelablePromise<CreateSourceApiV1SourcesPostResponse> {
		return __request(OpenAPI, {
			method: 'POST',
			url: '/api/v1/sources/',
			query: {
				url: data.url
			},
			errors: {
				422: 'Validation Error'
			}
		});
	}

	/**
	 * Get Source
	 * Get the source by id
	 * @param data The data for the request.
	 * @param data.sourceId
	 * @returns unknown Successful Response
	 * @throws ApiError
	 */
	public static getSource(
		data: GetSourceApiV1SourcesSourceIdGetData
	): CancelablePromise<GetSourceApiV1SourcesSourceIdGetResponse> {
		return __request(OpenAPI, {
			method: 'GET',
			url: '/api/v1/sources/{source_id}',
			path: {
				source_id: data.sourceId
			},
			errors: {
				422: 'Validation Error'
			}
		});
	}

	/**
	 * Delete Source
	 * Delete the source by id
	 * @param data The data for the request.
	 * @param data.sourceId
	 * @returns MessageResponse Successful Response
	 * @throws ApiError
	 */
	public static deleteSource(
		data: DeleteSourceApiV1SourcesSourceIdDeleteData
	): CancelablePromise<DeleteSourceApiV1SourcesSourceIdDeleteResponse> {
		return __request(OpenAPI, {
			method: 'DELETE',
			url: '/api/v1/sources/{source_id}',
			path: {
				source_id: data.sourceId
			},
			errors: {
				422: 'Validation Error'
			}
		});
	}

	/**
	 * Reload Sources
	 * Reload the sources
	 * @returns MessageResponse Successful Response
	 * @throws ApiError
	 */
	public static reload(): CancelablePromise<ReloadSourcesApiV1SourcesReloadPostResponse> {
		return __request(OpenAPI, {
			method: 'POST',
			url: '/api/v1/sources/reload'
		});
	}

	/**
	 * Reprocess Products
	 * Reprocess the products
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns MessageResponse Successful Response
	 * @throws ApiError
	 */
	public static reprocessProducts(
		data: ReprocessProductsApiV1SourcesReprocessPostData
	): CancelablePromise<ReprocessProductsApiV1SourcesReprocessPostResponse> {
		return __request(OpenAPI, {
			method: 'POST',
			url: '/api/v1/sources/reprocess',
			body: data.requestBody,
			mediaType: 'application/json',
			errors: {
				422: 'Validation Error'
			}
		});
	}

	/**
	 * Upload Excel File
	 * Upload an Excel file and add it to the database
	 * @param data The data for the request.
	 * @param data.formData
	 * @returns SourceCreateResponse Successful Response
	 * @throws ApiError
	 */
	public static uploadExcelFile(
		data: UploadExcelFileApiV1SourcesExcelPostData
	): CancelablePromise<UploadExcelFileApiV1SourcesExcelPostResponse> {
		return __request(OpenAPI, {
			method: 'POST',
			url: '/api/v1/sources/excel',
			formData: data.formData,
			mediaType: 'multipart/form-data',
			errors: {
				422: 'Validation Error'
			}
		});
	}
}
