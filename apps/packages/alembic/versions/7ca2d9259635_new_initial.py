"""
New initial

Revision ID: 7ca2d9259635
Revises:
Create Date: 2024-07-14 14:34:41.423912
"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

revision: str = "7ca2d9259635"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "config",
        sa.Column("id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column(
            "chatgpt_key",
            sa.Text(),
            nullable=False,
            comment="The ChatGPT API key",
        ),
        sa.Column(
            "model",
            sa.Text(),
            nullable=False,
            comment="The model to use for the ChatGPT",
        ),
        sa.Column(
            "pages_concurrency",
            sa.Integer(),
            nullable=False,
            comment="The number of concurrent pages to scrape",
        ),
        sa.Column(
            "products_concurrency",
            sa.Integer(),
            nullable=False,
            comment="The number of concurrent products to scrape",
        ),
        sa.Column(
            "required",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
            comment="The required fields for the product",
        ),
        sa.Column(
            "not_reprocess",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
            comment="The fields that should not be reprocessed",
        ),
        sa.Column(
            "description_prompt",
            sa.Text(),
            nullable=False,
            comment="The prompt for the description",
        ),
        sa.Column(
            "keywords_prompt",
            sa.Text(),
            nullable=False,
            comment="The prompt for the keywords",
        ),
        sa.Column(
            "properties_prompt",
            sa.Text(),
            nullable=False,
            comment="The prompt for the properties",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_config")),
    )
    op.create_table(
        "product",
        sa.Column("id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column("url", sa.Text(), nullable=False, comment="The URL of the product"),
        sa.Column("hash", sa.Text(), nullable=False, comment="The hash of the product"),
        sa.Column(
            "data",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="The data of the product for Satu.kz",
        ),
        sa.Column(
            "last_processed",
            sa.DateTime(),
            nullable=True,
            comment="The last time the product was processed",
        ),
        sa.Column(
            "source_id",
            sa.UUID(as_uuid=False),
            nullable=True,
            comment="The UUID of the source",
        ),
        sa.Column(
            "reprocessing",
            sa.Boolean(),
            server_default="false",
            nullable=False,
            comment="Whether the product is being reprocessed",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_product")),
        sa.UniqueConstraint("hash", name=op.f("uq_product_hash")),
    )
    op.create_table(
        "website_source",
        sa.Column("id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column("url", sa.Text(), nullable=False),
        sa.Column(
            "contents",
            sa.Text(),
            nullable=True,
            comment="The contents of the website",
        ),
        sa.Column("name", sa.Text(), nullable=True, comment="Website title"),
        sa.Column(
            "description",
            sa.Text(),
            nullable=True,
            comment="Website meta description",
        ),
        sa.Column("favicon", sa.Text(), nullable=True, comment="Website favicon"),
        sa.Column(
            "product_regex",
            sa.Text(),
            nullable=True,
            comment="Regex that matches the product URLs on the website",
        ),
        sa.Column(
            "pagination_regex",
            sa.Text(),
            nullable=True,
            comment="Regex that matches the pagination URLs on the website",
        ),
        sa.Column(
            "props_xpaths",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Mapping between the website properties and the XPATHs",
        ),
        sa.Column(
            "state",
            sa.Enum(
                "CREATED",
                "UNAVAILABLE",
                "SCRAPED",
                "XPATHS_PENDING",
                "XPATHS_READY",
                "DATA_COLLECTING",
                "DATA_PENDING_APPROVAL",
                "FINISHED",
                "EXPORTING",
                "EXPORTED",
                name="websitesourcestate",
            ),
            nullable=False,
            comment="The FSM state of the website source",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_website_source")),
    )
    op.create_table(
        "xlsx_source",
        sa.Column("id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column(
            "filename",
            sa.Text(),
            nullable=False,
            comment="The name of the file",
        ),
        sa.Column(
            "last_processed",
            sa.DateTime(),
            nullable=True,
            comment="The last time the file was processed",
        ),
        sa.Column(
            "state",
            sa.Enum(
                "CREATED",
                "EXTRACTING_SKUS",
                "SKUS_EXTRACTED",
                "PROCESSING",
                "DATA_PENDING_APPROVAL",
                "FINISHED",
                "EXPORTING",
                "EXPORTED",
                name="excelsourcestate",
            ),
            nullable=False,
            comment="The FSM state of the Excel source",
        ),
        sa.Column(
            "url",
            sa.Text(),
            nullable=False,
            comment="The URL of the file",
        ),
        sa.Column(
            "url_expires",
            sa.DateTime(),
            nullable=False,
            comment="The time when the URL expires",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_xlsx_source")),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("xlsx_source")
    op.drop_table("website_source")
    op.drop_table("product")
    op.drop_table("config")
    op.execute("DROP TYPE excelsourcestate")
    op.execute("DROP TYPE websitesourcestate")
    # ### end Alembic commands ###
